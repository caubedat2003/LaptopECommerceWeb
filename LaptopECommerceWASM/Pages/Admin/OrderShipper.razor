@using LaptopECommerceWASM.Pages.Admin

@using LaptopECommerce.Models
@using LaptopECommerceWASM.Services
@inject IToastService toastService
@inject IOrderService OrderService
@inject IUserService UserService
@inject IProcedureService ProcedureService

<div class="modal-overlay @(ShowDialog ? "show" : "")"></div>

@if (ShowDialog && Shippers != null)
{
    <div class="modal fade show d-block" id="assignModel" tabindex="-1">
        <div class="modal-dialog">
            <EditForm Model="Model" OnSubmit="HandleAssignSubmit">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Chỉ định shipper giao đơn này</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="()=>Hide()" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">

                        <div class="mb-3">
                            <label for="recipient-name" class="col-form-label">Chọn một shipper để giao đơn hàng:</label>
                            <InputSelect class="form-select" @bind-Value="Model.UserId">
                                <option value="@Guid.Empty">----- Chọn một shipper -----</option>
                                @foreach (var assignee in Shippers)
                                {
                                    <option value="@assignee.Id">@assignee.LastName @assignee.FirstName</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" @onclick="()=>Hide()" class="btn btn-secondary" data-bs-dismiss="modal">
                            Đóng
                        </button>
                        <button class="btn btn-success" type="submit">
                            <i class="ri-save-3-line"></i>
                            Lưu
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> CloseEventCallback { get; set; }

    private Guid OrderId;
    private List<UserDto> Shippers;
    protected bool ShowDialog { get; set; }
    private AssignShipperRequest Model { set; get; } = new AssignShipperRequest();

    public void Show(Guid orderId)
    {
        ShowDialog = true;
        OrderId = orderId;
        StateHasChanged();
    }
    private void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        Shippers = await ProcedureService.GetShippers();
    }

    protected async override Task OnParametersSetAsync()
    {
        if (OrderId != Guid.Empty)
        {
            var order = await OrderService.GetOrderById(OrderId);
            Model.UserId = order.ShipperId;
        }
    }

    protected async Task HandleAssignSubmit()
    {
        var result = await OrderService.AssignShipper(OrderId, Model);
        if (result)
        {
            ShowDialog = false;
            await CloseEventCallback.InvokeAsync(true);
            toastService.ShowSuccess("Assign user successfully");
        }
        else
        {
            toastService.ShowError("Assign task failed");
        }
    }
}
