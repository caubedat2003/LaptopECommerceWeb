@page "/UserEdit/{userId}"
@using LaptopECommerce.Models
@using LaptopECommerce.Models.Enum
@using LaptopECommerceWASM.Services
@inject IUserService UserApiClient
@inject IToastService toastService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

@if(userModel == null)
{
    <LoadingIndicator />
}
else
{
    <EditForm Model="userModel" OnSubmit="HandleEditUser">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Họ</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputText id="name" class="form-control" @bind-Value="userModel.LastName"></InputText>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Tên</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputText id="name" class="form-control" @bind-Value="userModel.FirstName"></InputText>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Email</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputText id="name" class="form-control" @bind-Value="userModel.Email"></InputText>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Số điện thoại</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputText id="phoneNumber" class="form-control" @bind-Value="userModel.PhoneNumber"></InputText>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Giới tính</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputSelect id="gender" class="form-select" @bind-Value="userModel.Gender">
                            <option>------ Chọn giới tính -----</option>
                            @foreach (string item in Enum.GetNames(typeof(Gender)))
                            {
                                <option value="@item">@item</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Ngày sinh</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputDate id="dateOfBirth" class="form-control" @bind-Value="@dateOfBirth"></InputDate>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Địa chỉ</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputText id="address" class="form-control" @bind-Value="userModel.Address"></InputText>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Tên đăng nhập</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputText id="username" class="form-control" @bind-Value="userModel.UserName"></InputText>
                    </div>
                </div>
                <hr />

                <div class="row align-items-center">
                    <div class="col-sm-3 d-flex align-items-center">
                        <h6 class="mb-0">Mật khẩu</h6>
                        <InputCheckbox class="form-check-input ms-2" @bind-Value="@isPasswordChanged"></InputCheckbox>
                    </div>
                    <div class="col-sm-9">
                        <div class="input-group">
                            @if(isPasswordChanged == true)
                            {
                                <input id="password" type="password" class="form-control" @ref="passwordInput"
                                       placeholder="Password" @bind-value="@newPassWord" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                    <i class="ri-eye-line" id="passwordIcon"></i>
                                </button>
                            }
                            else
                            {
                                <fieldset disabled class="input-group">
                                    <input id="password" type="password" class="form-control" @ref="passwordInput"
                                            placeholder="Password" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="ri-eye-line" id="passwordIcon"></i>
                                    </button>
                                    
                                </fieldset>
                            }
                        </div>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-sm-3">
                        <h6 class="mb-0">Role</h6>
                    </div>
                    <div class="col-sm-9">
                        <InputSelect id="role" class="form-select" @bind-Value="userModel.Role">
                            <option value="Customer">------ Chọn quyền -----</option>
                            <option value="Admin">Quản trị viên</option>
                            <option value="Customer">Khách hàng</option>
                            <option value="Shipper">Nhân viên giao hàng</option>
                        </InputSelect>
                    </div>
                </div>
                <hr />

                <button class="btn btn-outline-secondary" type="button" @onclick="()=>BackBtn()">
                    <i class="ri-arrow-left-line"></i>
                    Quay lại
                </button>
                <button class="btn btn-success" type="submit">
                    <i class="ri-save-3-line"></i>
                    Lưu
                </button>
            </div>
        </div>

    </EditForm>
}

@code {
    private UserDto userModel { get; set; }
    private ElementReference passwordInput;
    private bool isPasswordVisible = false;
    private bool ShowErrors;
    private List<string> Errors = new List<string>();
    private DateTime dateOfBirth { get; set; }
    public bool isPasswordChanged = false;
    private string newPassWord = "";

    [Parameter]
    public string userId { get; set;  }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserApiClient.GetUserDetail(Guid.Parse(userId));
        userModel = new UserDto();
        userModel.FirstName = user.FirstName;
        userModel.LastName = user.LastName;
        userModel.PhoneNumber = user.PhoneNumber;
        userModel.Email = user.Email;
        userModel.Gender = user.Gender;
        userModel.UserName = user.UserName;
        userModel.Address = user.Address;
        userModel.Role = user.Role;
        dateOfBirth = user.DateOfBirth;
    }

    public async Task HandleEditUser()
    {
        if (isPasswordChanged)
        {
            userModel.isChangePass = true;
            userModel.Password = newPassWord;
        }
        else
        {
            userModel.isChangePass = false;
            userModel.Password = "no";
        }
        userModel.DateOfBirth = dateOfBirth;
        var result = await UserApiClient.Update( Guid.Parse(userId), userModel);
        if (result)
        {
            toastService.ShowSuccess($"Chỉnh sửa người dùng {userModel.FirstName} thành công!");
            navigationManager.NavigateTo("/UserList");
        }
        else
        {
            toastService.ShowError("Có lỗi xảy ra. Vui lòng liên hệ admin");
        }

        
    }

    private void BackBtn()
    {
        navigationManager.NavigateTo("UserList");
    }

    private async Task TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        var newType = isPasswordVisible ? "text" : "password";
        await JSRuntime.InvokeVoidAsync("togglePasswordVisibility", passwordInput, newType);
    }
}