@page "/Checkout"
@using LaptopECommerce.Models
@using LaptopECommerceWASM.Components
@using Microsoft.AspNetCore.Components.Authorization
@using LaptopECommerceWASM.Services
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CartService CartService
@inject NavigationManager navigationManager
@inject IOrderService OrderService
@inject IToastService toastService

<div class="row">
    <div class="col-sm-6">
        @* Hiển thị thông tin người dùng đã đăng nhập, nếu chưa đăng nhập hiển thị đường link dẫn đến trang đăng nhập *@
        <h4 class="fw-bold">Thông tin khách hàng</h4>
        @if (CurrentUser == null)
        {
            <p class="text-danger">
                Bạn chưa đăng nhập. Vui lòng <a href="/login">đăng nhập</a> để tiếp tục thanh toán.
            </p>
        }
        else
        {
            <div class="card">
                <div class="card-body">
                    <p><strong>Họ tên:</strong> @($"{CurrentUser.LastName} {CurrentUser.FirstName}")</p>
                    <p><strong>Email:</strong> @CurrentUser.Email</p>
                    <p><strong>Số điện thoại:</strong> @CurrentUser.PhoneNumber</p>
                    <p><strong>Địa chỉ:</strong> @CurrentUser.Address</p>
                </div>
            </div>
        }
    </div>
    <div class="col-sm-6">
        @* Hiển thị thông tin đơn hàng sau khi ấn nút thanh toán ở trang cart *@
        <h4 class="fw-bold">Thông tin đơn hàng</h4>
        @if (CartService.GetCartItems().Count == 0)
        {
            <p class="text-danger">Giỏ hàng trống. Vui lòng thêm sản phẩm trước khi thanh toán.</p>
        }
        else
        {
            <div class="card">
                <div class="card-body">
                    @foreach (var item in CartService.GetCartItems())
                    {
                        <div class="row mb-2">
                            <div class="col-sm-2">
                                <img src="/image/@item.ImageURL" alt="@item.Name" class="card-img-top" style="height:50px; object-fit:contain;" />
                            </div>
                            <div class="col-sm-8">
                                <p>@item.Name (x @item.Quantity)</p>
                            </div>
                            <div class="col-sm-2 text-end">
                                <p>@CurrencyHelper.FormatCurrency((item.Price * item.Quantity))</p>
                            </div>
                        </div>
                    }
                    <hr />
                    <h5 class="text-danger fw-bold">Tổng tiền: @CartService.GetTotalAmount().ToString("N0")đ</h5>
                </div>
            </div>
        }
        @if (CurrentUser != null && CartService.GetCartItems().Count > 0)
        {
            <button class="btn btn-primary light-green-btn mt-3" @onclick="ConfirmOrder">
                <i class="fa fa-credit-card me-2"></i>
                Xác nhận mua
            </button>
        }
    </div>
</div>

@code {
    private UserDto CurrentUser;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == "UserId");
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
            {
                Console.WriteLine($"UserId: {userId}");
                CurrentUser = await UserService.GetUserDetail(userId);
            }
            else
            {
                Console.WriteLine("Không thể tìm thấy UserId hoặc UserId không hợp lệ.");
            }
        }
        else
        {
            Console.WriteLine("Người dùng chưa đăng nhập.");
        }
    }


    private async Task ConfirmOrder()
    {
        var orderRequest = new OrderRequest
            {
                CustomerId = CurrentUser.Id,
                Items = CartService.GetCartItems().Select(item => new OrderItemRequest
                {
                    LaptopId = item.LaptopId,
                    Quantity = item.Quantity,
                    Price = item.Price
                }).ToList(),
                TotalAmount = CartService.GetTotalAmount()
            };

        var response = await OrderService.CreateOrder(orderRequest);

        if (response)
        {
            CartService.ClearCart();
            navigationManager.NavigateTo("/OrderSuccess");
            toastService.ShowSuccess("Đặt hàng thành công! Chúng tôi sẽ sớm liên hệ với bạn!");
        }
        else
        {
            toastService.ShowError("Đã xảy ra lỗi khi đặt hàng. Vui lòng liên hệ Admin");
        }
    }
}
